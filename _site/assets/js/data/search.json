[ { "title": "프로그래머스 - 중앙값 구하기", "url": "/posts/programmers_middle_value/", "categories": "프로그래머스", "tags": "", "date": "2024-07-07 00:00:00 +0900", "snippet": "프로그래머스 - 중앙값 구하기기초 알고리즘 문제인데, c++을 몇 년만에 다시 공부하면서 quick sort 함수 구현을 해보게 되어서 글로 남긴다.1. 접근(1) 정렬한다.(2) array[len/2]를 리턴한다.2. 소스코드void quick_sort(int* array, int array_len, int left, int right) { i...", "content": "프로그래머스 - 중앙값 구하기기초 알고리즘 문제인데, c++을 몇 년만에 다시 공부하면서 quick sort 함수 구현을 해보게 되어서 글로 남긴다.1. 접근(1) 정렬한다.(2) array[len/2]를 리턴한다.2. 소스코드void quick_sort(int* array, int array_len, int left, int right) { if (left &gt;= right) return; int org_left = left; int org_right = right; int pivot = array[left++]; //pivot - left ------ right while (left &lt;= right) { while (left &lt; array_len &amp;&amp; array[left] &lt;= pivot) left++; while (right &gt;= left &amp;&amp; array[right] &gt;= pivot) right--; //swap if (left &lt; right) { int tmp = array[left]; array[left] = array[right]; array[right] = tmp; } } int tmp = array[right]; array[right] = array[org_left]; array[org_left] = tmp; quick_sort(array, array_len, org_left, right - 1); quick_sort(array, array_len, right + 1, org_right);}void sort(int* array, int array_len) { if (array_len &lt;= 0) return; quick_sort(array, array_len, 0, array_len - 1);}// array_len은 배열 array의 길이입니다.int solution(int array[], size_t array_len) { sort(array, array_len); return array[array_len / 2];} ****첫번째 값을 pivot으로 잡아서, left는 +1씩 증가시켜가며 pivot보다 큰 값을 만날 때까지 이동하고, right는 -1씩 감소시켜가며 pivot보다 작은 값을 만날 때까지 이동한다.left와 right가 둘다 정지했다면, left\\&lt;right라는 가정 하에 두 자리의 값을 swap한다.그리고 다시 위의 동작을 반복한다.위의 동작은 left가 right를 넘어설 때까지 반복된다.left가 right를 넘어섰다면 right의 자리와 pivot의 자리의 값을 교체한다." }, { "title": "이전 블로그 주소", "url": "/posts/first_post/", "categories": "기타", "tags": "", "date": "2024-07-07 00:00:00 +0900", "snippet": "이전 블로그 주소 https://sealbinary.blogspot.com/", "content": "이전 블로그 주소 https://sealbinary.blogspot.com/" } ]
